import datetime
import re
from email.policy import default

from django.core.exceptions import ValidationError
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db import models
from django.db.models import Q

from apps.abstraction.models import AbstractModel, nb
from apps.apps.logs.models import AmountProductLogs

BASE_TEXT = '\n–î–æ—Å—Ç—É–ø–µ–Ω trade-in ‚ôªÔ∏è' \
            '\n(–°–¥–∞–µ—Ç–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ)' \
            '\n\n–°–∞–º–æ–≤—ã–≤–æ–∑:' \
            '\n- –≥. –°–ü–ë, —É–ª. –í–æ—Å—Å—Ç–∞–Ω–∏—è 7, –ë–¶ ¬´–ê–Ω–¥—Ä–µ–µ–≤—Å–∫–∏–π¬ª, –æ—Ñ–∏—Å 208' \
            '\n- –≥. –ú–æ—Å–∫–≤–∞, –ë–∞—Ä–∫–ª–∞—è, 6, —Å—Ç—Ä. 3, –æ—Ñ–∏—Å 104' \
            '\n\n–ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∞–º –°–ù–ìüöÄ'


class PriceModel(AbstractModel):
    class Meta:
        verbose_name = '–ü—Ä–∞–π—Å'
        verbose_name_plural = '–ü—Ä–∞–π—Å—ã'

    category = models.ForeignKey(
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
        to='parameter.CategoryModel',
        on_delete=models.CASCADE,
    )
    text = models.TextField(
        verbose_name='–ü—Ä–∞–π—Å',
    )

    region = models.ForeignKey(
        verbose_name='–†–µ–≥–∏–æ–Ω –ø—Ä–∞–π—Å–∞',
        to='geography.CityModel',
        on_delete=models.CASCADE,
        default=1,
    )

    provider = models.ForeignKey(
        verbose_name='–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        to='geography.SuppProviderModel',
        on_delete=models.CASCADE,
    )

    def __str__(self):
        return self.category.name


def save_path(instance, filename):
    return 'device/{0}/{1}/{2}'.format(
        instance.subcategory.category.name.replace(' ', '_'),
        instance.subcategory.name.replace(' ', '_'),
        filename,
    )


def get_date(line):
    line = str(line)
    date_list = line.split('-')
    return '-'.join(date_list[::-1])


class ProductModel(AbstractModel):
    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'

    STATUS_CHOICES = (
        ('0', '–ú–æ–¥–µ—Ä–∞—Ü–∏—è'),
        ('1', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
        ('sale', '–°–∫–∏–¥–∫–∞'),
        ('2', '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'),
        ('3', '–ü—Ä–æ–¥–∞–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º'),
        ('4', '–ü—Ä–æ–¥–∞–Ω–æ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ('5', '–ü—Ä–æ–¥–∞–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ'),
    )
    image_1 = models.ImageField(
        verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        upload_to=save_path,
    )
    image_2 = models.ImageField(
        verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        upload_to=save_path,
        **nb,
    )
    image_3 = models.ImageField(
        verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        upload_to=save_path,
        **nb,
    )
    name = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
        max_length=90,
        db_index=True,
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–µ—á–Ω—É—é —Ü–µ–Ω—É'
                  '<br><br>–¶–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã'
                  '<br><br>–î–ª—è –ø–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã, –æ–±–µ—Ä–Ω–∏—Ç–µ –µ—ë –≤ ^1000^'
                  '<br><br>üî• ‚ö°Ô∏è üí• ‚ÇΩ üîª ‚úÖ üîù'
    )
    amount_buy = models.BigIntegerField(
        verbose_name='–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏',
        help_text='–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏.',
    )
    amount = models.BigIntegerField(
        verbose_name='–¶–µ–Ω–∞',
        **nb,
    )
    code = models.CharField(
        verbose_name='–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞',
        max_length=30,
    )
    amount_sale = models.IntegerField(
        verbose_name='–°–∫–∏–¥–∫–∞',
        default=0,
    )

    status = models.CharField(
        verbose_name='–°—Ç–∞—Ç—É—Å',
        max_length=50,
        choices=STATUS_CHOICES,
        default=STATUS_CHOICES[0][0],
    )
    state = models.ForeignKey(
        verbose_name='–°–æ—Å—Ç–æ—è–Ω–∏–µ',
        to='product_conf.ProductStateModel',
        on_delete=models.CASCADE,
    )
    kit = models.ForeignKey(
        verbose_name='–ö–æ–º–ø–ª–µ–∫—Ç',
        to='product_conf.ProductKitModel',
        on_delete=models.CASCADE,
    )
    guarantee = models.ForeignKey(
        verbose_name='–ì–∞—Ä–∞–Ω—Ç–∏—è',
        to='product_conf.ProductGuaranteeModel',
        on_delete=models.CASCADE,
        **nb,
    )
    custom_guarantee = models.DateField(
        verbose_name='–°–≤–æ—è –≥–∞—Ä–∞–Ω—Ç–∏—è',
        **nb,
    )
    subcategory = models.ForeignKey(
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        to='product_conf.ProductSubCategoryModel',
        on_delete=models.CASCADE,
    )
    text = models.TextField(
        verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        max_length=700,
        help_text='–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.',
        **nb,
    )
    author = models.ForeignKey(
        verbose_name='–ê–≤—Ç–æ—Ä',
        to='user.UserModel',
        on_delete=models.CASCADE,
        blank=True,
    )
    caption = models.TextField(
        verbose_name='–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
        max_length=1024,
        **nb,
    )

    city = models.ForeignKey(
        verbose_name='–ì–æ—Ä–æ–¥',
        to='geography.CityModel',
        on_delete=models.CASCADE,
        default=1
    )

    date_sale = models.DateField(
        verbose_name='–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏',
        **nb,
    )
    create = models.BooleanField(
        verbose_name='–°–æ–∑–¥–∞–Ω–æ',
        default=False,
    )

    def __str__(self):
        return self.name

    def clean(self):
        # try:
        name = self.name.replace('.', '').replace(',', '')
        numbers = re.findall(r'\d+(?:[.,]\d+)?', name)
        prices = [int(num) for num in numbers]
        prices = prices[-1]

        if int(prices) < 1000:
            raise ValidationError({'name': '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞'})

        if str(self.amount) != str(prices):
            if self.create:
                from apps.apps.product.tasks import send_message_amount_change
                send_message_amount_change.delay(_id=self.id)
        self.amount = str(prices)
        #
        # except:
        #     raise ValidationError({'name': '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞'})

        if self.guarantee and self.custom_guarantee:
            raise ValidationError(
                {
                    'guarantee': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ 1 –∑–Ω–∞—á–µ–Ω–∏–µ',
                    'custom_guarantee': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ 1 –∑–Ω–∞—á–µ–Ω–∏–µ'
                },
            )
        if not self.guarantee and not self.custom_guarantee:
            raise ValidationError(
                {
                    'guarantee': '–í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–∑ –ø–æ–ª–µ–π',
                    'custom_guarantee': '–í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–∑ –ø–æ–ª–µ–π'
                },
            )

    def save(self, *args, **kwargs):

        text = ''

        if self.name.count('^') == 2:
            result = re.findall(r'\^(.*?)\^', self.name)[0].replace('.', '').replace(',', '').replace(' ', '').replace(
                '^', '')
            _result = ''
            for i in result:
                _result += str('\u0336' + i + '\u0336')
            self.name = self.name.replace(result, _result).replace('^Ã∂', '').replace('^', '')

        text += '<b>' + self.name + '</b>'
        text += '\n\n–ö–æ–º–ø–ª–µ–∫—Ç: ' + self.kit.name
        text += '\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: \n' + self.state.name
        text += '\n\n–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ' + self.code

        if self.text:
            text += '\n\n' + self.text

        if self.custom_guarantee:
            text += '\n\n–ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ: ' + get_date(self.custom_guarantee)
        if self.guarantee:
            text += '\n\n' + str(self.guarantee)

        text += '\n' + BASE_TEXT
        self.caption = text
        if self.status in ['3', '4', '5']:
            if not self.date_sale:
                self.date_sale = datetime.date.today()
        else:
            self.date_sale = None

        self.save_base(*args, **kwargs)
        if not self.create and self.status in ['1', 'sale'] and self.author.groups.all() not in ['–ü–æ—Å—Ç–∞–≤—â–∏–∫']:
            self.create = True
            self.save_base(*args, **kwargs)
            from apps.apps.product.tasks import send_message_add_category
            send_message_add_category.delay(_id=self.id)


class FavoritesModel(AbstractModel):
    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ë/–£'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ë/–£'

    user = models.ForeignKey(
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        to='user.TgUserModel',
        on_delete=models.CASCADE,
    )
    product = models.ForeignKey(
        verbose_name='–¢–æ–≤–∞—Ä',
        to='product.ProductModel',
        on_delete=models.CASCADE,
    )

    def __str__(self):
        return self.product.name


class FavoritesSubcategoryModel(AbstractModel):
    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë/–£'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë/–£'

    user = models.ForeignKey(
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        to='user.TgUserModel',
        on_delete=models.CASCADE,
    )
    subcategory = models.ForeignKey(
        verbose_name='–¢–æ–≤–∞—Ä',
        to='product_conf.ProductSubCategoryModel',
        on_delete=models.CASCADE,
    )

    def __str__(self):
        return self.subcategory.name


class NewProductModel(AbstractModel):
    class Meta:
        verbose_name = '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'
        verbose_name_plural = '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'

    subcategory = models.ForeignKey(
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        to='parameter.SubCategoryModel',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
    )
    tilda_UID = models.BigIntegerField(
        verbose_name='–ù–æ–≤—ã–π —Å–∞–π—Ç ID',
        primary_key=True,
        unique=True
    )
    title = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
        max_length=500,
    )
    amount = models.CharField(
        verbose_name='–¶–µ–Ω–∞',
        max_length=255,
    )
    amount_sale = models.CharField(
        verbose_name='–°–∫–∏–¥–∫–∞',
        max_length=255,
        default=0
    )
    params = models.JSONField(
        verbose_name='–ö–ª—é—á–∏',
        null=True,
        blank=True,
    )
    update = models.BooleanField(
        verbose_name='–û–±–Ω–æ–≤–ª—è—Ç—å?',
        default=True,
    )

    provider = models.ForeignKey(
        verbose_name='–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        to='geography.SuppProviderModel',
        null=True,
        blank=True,
        on_delete=models.CASCADE,
    )
    tilda_id = models.CharField(
        max_length=255,
        verbose_name='ID –¢–∏–ª—å–¥—ã',
        null=True,
        blank=True,
    )
    def __str__(self):
        return self.title


class NewPriceSearchModel(AbstractModel):
    class Meta:
        verbose_name = '–¶–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'
        verbose_name_plural = '–¶–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'

    amount = models.CharField(
        verbose_name='–¶–µ–Ω–∞',
        max_length=255,
    )
    markup = models.CharField(
        verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        max_length=255,
    )
    params = models.JSONField(
        verbose_name='–ö–ª—é—á–∏',
        null=True,
        blank=True,
    )

    provider = models.ForeignKey(
        verbose_name='–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        to='geography.SuppProviderModel',
        on_delete=models.CASCADE,
    )

    city = models.ForeignKey(
        verbose_name='–ì–æ—Ä–æ–¥',
        to='geography.CityModel',
        on_delete=models.CASCADE,
        default=1
    )

    def __str__(self):
        return self.provider.name
