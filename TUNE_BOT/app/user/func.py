import re
from pprint import pprint

from aiogram import types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext

import app.user.kb as kb
from app.user.state import StateUser
from app.user.typing import get_user_type

from conf.conf_bot import dp, text, client, api
from service.send_user import send_to_user
from service.validate import validate_keyboard


@dp.message(Text(text=text['–õ–ö']['–ó–∞–≥–æ–ª–æ–≤–æ–∫']))
@dp.message(Text(text=text['–õ–ö']['–ù–∞–∑–∞–¥']))
@dp.message(Command(commands=text['–õ–ö']['–ö–æ–º–∞–Ω–¥–∞']))
async def index_user(
        message: types.Message,
        state: FSMContext = None,
):
    user = await api.get_user(
        tg_id=message.from_user.id
    )
    if not user:
        pass
    res = await api.get_bonus(message.from_user.id)
    if res['status']:
        _text = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: <b>{res["data"]["bonus"]}</b>'
    else:
        #  _text = f'–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏üòî'
        _text = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: <b>0</b>'

    user = get_user_type(user['data'])
    user_text = f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:' \
                f'\n\n–ù–∏–∫: {user.username}' \
                f'\n–ò–º—è: {user.first_name}' \
                f'\n–§–∞–º–∏–ª–∏—è: {user.last_name}' \
                f'\n\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}' \
                f'\n–ü–æ—á—Ç–∞: {user.email}' \
                f'\n\n–ì–æ—Ä–æ–¥: {user.city}' \
                f'\n\n{_text}'

    markup = await kb.kb_index()
    await client.send_message(
        chat_id=message.from_user.id,
        text=user_text,
        reply_markup=markup['keyboard']
    )


################################
# –ò–º—è


@dp.message(Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'))
async def change_name(
        message: types.Message,
        state: FSMContext,
):
    await client.send_message(
        chat_id=message.from_user.id,
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è',
        reply_markup=types.ReplyKeyboardRemove,
    )
    await state.set_state(StateUser.first_name)


@dp.message(StateUser.first_name)
async def change_name_update(
        message: types.Message,
        state: FSMContext,
):
    res = await api.update_user(
        tg_id=message.from_user.id,
        first_name=message.text,
    )
    if res['status']:
        await state.clear()
        await client.send_message(
            chat_id=message.from_user.id,
            text='–ò–º—è <b>—É—Å–ø–µ—à–Ω–æ</b> –∏–∑–º–µ–Ω–µ–Ω–æ!',
        )
        return await index_user(
            message=message,
            state=state,
        )

    await client.send_message(
        chat_id=message.from_user.id,
        text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
    )
    return await index_user(
        message=message,
        state=state,
    )


################################
# –§–∞–º–∏–ª–∏—è


@dp.message(Text(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é'))
async def change_last_name(
        message: types.Message,
        state: FSMContext,
):
    await client.send_message(
        chat_id=message.from_user.id,
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é',
        reply_markup=types.ReplyKeyboardRemove,
    )
    await state.set_state(StateUser.last_name)


@dp.message(StateUser.last_name)
async def change_last_name_update(
        message: types.Message,
        state: FSMContext,
):
    res = await api.update_user(
        tg_id=message.from_user.id,
        last_name=message.text,
    )
    if res['status']:
        await state.clear()
        await client.send_message(
            chat_id=message.from_user.id,
            text='–§–∞–º–∏–ª–∏—è <b>—É—Å–ø–µ—à–Ω–æ</b> –∏–∑–º–µ–Ω–µ–Ω–∞!',
        )
        return await index_user(
            message=message,
            state=state,
        )

    await client.send_message(
        chat_id=message.from_user.id,
        text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
    )
    return await index_user(
        message=message,
        state=state,
    )


################################
# –ü–æ—á—Ç–∞


@dp.message(Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É'))
async def change_email(
        message: types.Message,
        state: FSMContext,
):
    await client.send_message(
        chat_id=message.from_user.id,
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É',
        reply_markup=types.ReplyKeyboardRemove,
    )
    await state.set_state(StateUser.email)


@dp.message(StateUser.email)
async def change_email_update(
        message: types.Message,
        state: FSMContext,
):
    if not re.match(r"[^@]+@[^@]+\.[^@]+", message.text):
        return await client.send_message(
            chat_id=message.from_user.id,
            text='<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n'
                 '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥',
        )

    res = await api.update_user(
        tg_id=message.from_user.id,
        email=message.text,
    )
    if res['status']:
        await state.clear()
        await client.send_message(
            chat_id=message.from_user.id,
            text='–ü–æ—á—Ç–∞ <b>—É—Å–ø–µ—à–Ω–æ</b> –∏–∑–º–µ–Ω–µ–Ω–∞!',
        )
        return await index_user(
            message=message,
            state=state,
        )

    await client.send_message(
        chat_id=message.from_user.id,
        text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
    )
    return await index_user(
        message=message,
        state=state,
    )


################################
# –ì–æ—Ä–æ–¥


@dp.message(Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'))
async def change_city(
        message: types.Message,
        state: FSMContext,
):
    res = await api.get_cities()
    markup = [[types.KeyboardButton(text=i)] for i in res['data']]
    markup = types.ReplyKeyboardMarkup(keyboard=markup, resize_keyboard=True)
    await client.send_message(
        chat_id=message.from_user.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
        reply_markup=markup,
    )
    await state.update_data(v_cities=res['data'])
    await state.set_state(StateUser.city)


@dp.message(StateUser.city)
async def change_city_update(
        message: types.Message,
        state: FSMContext,
):
    data = await state.get_data()
    if message.text not in data['v_cities']:
        return await client.send_message(
            chat_id=message.from_user.id,
            text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ <b>–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</b>!</b>'
        )

    res = await api.update_user_city(
        tg_id=message.from_user.id,
        city_name=message.text,
    )
    if res['status']:
        await state.clear()
        await client.send_message(
            chat_id=message.from_user.id,
            text='–ì–æ—Ä–æ–¥ <b>—É—Å–ø–µ—à–Ω–æ</b> –∏–∑–º–µ–Ω–µ–Ω!',
        )
        return await index_user(
            message=message,
            state=state,
        )

    await client.send_message(
        chat_id=message.from_user.id,
        text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
    )
    return await index_user(
        message=message,
        state=state,
    )


################################
# –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ


@dp.message(Text(text='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'))
async def company(
        message: types.Message,
        state: FSMContext,
):
    markup = [
        [
            types.InlineKeyboardButton(
                text='–°–∞–π—Ç',
                web_app=types.WebAppInfo(url='https://tuneapp.ru')
            ),
            types.InlineKeyboardButton(
                text='–¢–∞–ø–ª–∏–Ω–∫',
                web_app=types.WebAppInfo(url='https://taplink.cc/tuneapple')
            ),

        ],
    ]
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=markup,
    )

    await client.send_photo(
        chat_id=message.from_user.id,
        caption='–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –¢–Æ–ù., –Ω–∞–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—è–≤–∫—É –≤ –±–æ—Ç.' \
                '\n\n–ï—Å–ª–∏ –í—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ:' \
                '\n1) –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' \
                '\n2) –ü—Ä–∞–π—Å—ã' \
                '\n3) –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏' \
                '\n\n–ï—Å–ª–∏ –í—ã –±–ª–æ–≥–µ—Ä:' \
                '\n1) –°—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å' \
                '\n2) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è' \
                '\n3) –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏' \
                '\n\n–ü–æ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º:' \
                '\n1) –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' \
                '\n2) –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏' \
                '\n\n–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É üòå', \
        photo='https://s3.timeweb.com/2481cb39-1f5a3cd1-6620-459a-860f-6d8d44288631/tune/static/img/favicon.jpg',
        reply_markup=markup
    )
