from pprint import pprint

from aiogram import types
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext

import app.product.kb as kb
from app.product.state import StateNew

from conf.conf_bot import dp, text, client, api
from service.send_user import send_to_user
from service.validate import validate_keyboard


@dp.message(Text(text=text['–ù–æ–≤—ã–µ']['–ó–∞–≥–æ–ª–æ–≤–æ–∫']))
@dp.message(Text(text=text['–ù–æ–≤—ã–µ']['–ù–∞–∑–∞–¥']))
# @dp.message(Command(commands=text['–ù–æ–≤—ã–µ']['–ö–æ–º–∞–Ω–¥–∞']))
async def index_new(
        message: types.Message,
        state: FSMContext = None,
):
    # await client.send_message(
    #     chat_id=message.from_user.id,
    #     text='‚Äî 2018 ¬´TuneApple¬ª, –≤—ã–µ–∑–¥–Ω–æ–π —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ Apple\n\n'
    #          '‚Äî 2020 ¬´TuneApple¬ª, –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ\n\n'
    #          '‚Äî 2022 ¬´–¢–Æ–ù¬ª, –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ\n\n'
    #          '‚Äî 2023 ¬´–¢–Æ–ù¬ª, –ø–µ—Ä–≤—ã–π –≤ –†–æ—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏\n\n'
    #          '‚≠êÔ∏è –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ, –ø–µ—Ä–≤—ã–π –≤ –†–æ—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ ¬´–¢–Æ–ù¬ª\n\n'
    #          'ü•≥ –ï—â–µ –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Å–∞–π—Ç–µ:\n'
    #          'http://new.tuneapp.ru',
    # )
    await client.send_message(
        chat_id=message.from_user.id,
        text='–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.',
    )
    return
    # markup = await kb.kb_index()
    # if not markup:
    #     return await client.send_message(
    #         chat_id=message.from_user.id,
    #         text=text['–ë/–£ —Ç–æ–≤–∞—Ä—ã']['404'],
    #     )
    # await client.send_message(
    #     chat_id=message.from_user.id,
    #     text=text['–ë/–£ —Ç–æ–≤–∞—Ä—ã']['–ú–µ–Ω—é']['–¢–∏–ø']['–°–æ–æ–±—â–µ–Ω–∏–µ'],
    #     reply_markup=markup['keyboard']
    # )
    # await state.update_data(v_types=markup['values'])
    # await state.set_state(StateNew.manufacturer)


@dp.message(StateNew.manufacturer)
@validate_keyboard('v_types', text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥'])
async def new_manufacturer(
        message: types.Message,
        state: FSMContext,
):
    """
    –í—ã—Å—ã–ª–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    :param message:
    :param state:
    :return:
    """
    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥']:
        data = await state.get_data()
        msg = data['type_name']
    else:
        msg = message.text
    markup = await kb.kb_manufacturer(
        type_name=msg,
    )
    if not markup:
        return await client.send_message(
            chat_id=message.from_user.id,
            text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['404'],
        )
    await client.send_message(
        chat_id=message.from_user.id,
        text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–°–æ–æ–±—â–µ–Ω–∏–µ'],
        reply_markup=markup['keyboard']
    )

    await state.update_data(type_name=msg)
    await state.update_data(v_manufacturer=markup['values'])
    await state.set_state(StateNew.category)


@dp.message(StateNew.category)
@validate_keyboard('v_manufacturer',
                   text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥'],
                   text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–¢–∏–ø']['–ù–∞–∑–∞–¥'],
                   text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥'],
                   )
async def new_category(
        message: types.Message,
        state: FSMContext,
):
    """
    –í—ã—Å—ã–ª–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    :param message:
    :param state:
    :return:
    """

    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥']:
        return await new_manufacturer(
            message=message,
            state=state,
        )
    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–¢–∏–ø']['–ù–∞–∑–∞–¥']:
        return await index_new(
            message=message,
            state=state,
        )
    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥']:
        data = await state.get_data()
        manufacturer_name = data['manufacturer_name']
        type_name = data['type_name']
    else:
        data = await state.get_data()
        manufacturer_name = message.text
        type_name = data['type_name']

    markup = await kb.kb_subcategory(
        type_name=type_name,
        manufacturer_name=manufacturer_name
    )
    if not markup:
        return await client.send_message(
            chat_id=message.from_user.id,
            text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        )
    await state.update_data(manufacturer_name=manufacturer_name)
    await state.update_data(v_category=markup['values'])
    await state.update_data(v_step=[])

    await client.send_message(
        chat_id=message.from_user.id,
        text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']['–°–æ–æ–±—â–µ–Ω–∏–µ'],
        reply_markup=markup['keyboard']
    )
    await state.set_state(StateNew.keys)


@dp.message(StateNew.keys)
@validate_keyboard(value='v_category',
                   back=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥'],
                   back_2=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥'],
                   back_3=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥ 2'],
                   )
async def new_keys(
        message: types.Message,
        state: FSMContext,
):
    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']['–ù–∞–∑–∞–¥']:
        return await new_category(
            message=message,
            state=state,
        )

    if message.text == text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥']:
        return await new_category(
            message=message,
            state=state,
        )

    data = await state.get_data()
    if text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–ù–∞–∑–∞–¥ 2'] in message.text:
        step = data['step']
        await state.update_data(step=int(step) - 2)
        step_choice = data['step_choice']
        last_step_name = data['last_step_name']
        step_choice.pop(last_step_name, None)
        await state.update_data(step_choice=step_choice)
    data = await state.get_data()

    # –°—Ç–∞–≤–∏–º –∫–ª—é—á–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ä–∏—é
    if message.text in data['v_category'] and message.text not in data['v_step']:
        keys_list = await api.get_new_keys(subcategory__name=message.text)
        if not keys_list:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å –±–µ–∑ –∫–ª—é—á–µ–π
            try:
                price = await api.post_values_keys(
                    subcategory__name=message.text,
                    key_dict={}
                )
                if price['text'].replace('\n', ''):
                    markup = await kb.get_product_kb()
                    return await send_to_user(
                        message=message,
                        text=price['text'],
                        images=[price['image']],
                        inline_keyboard=markup
                    )

            except:
                pass
            return await client.send_message(
                chat_id=message.from_user.id,
                text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['404']
            )

        step = 1
        category__name = message.text
        await state.update_data(keys_list=keys_list)
        await state.update_data(category__name=category__name)
        await state.update_data(step=step)
        await state.update_data(step_choice={})
        await state.update_data(all_step=len(keys_list))
    else:
        keys_list: dict = data['keys_list']
        category__name: str = data['category__name']
        step: int = int(data['step'])

    key_name = [i for i in keys_list if i['order_id'] == step]
    key_name = key_name[0]['name'] if key_name else None
    if key_name:
        # –ï—Å–ª–∏ —à–∞–≥ = 1, –≤—ã—Å—ã–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if step == 1:
            markup = await kb.kb_key_values(
                key_name=key_name,
                category__name=category__name,
            )
            if not markup:
                return await client.send_message(
                    chat_id=message.from_user.id,
                    text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                )
            await client.send_message(
                chat_id=message.from_user.id,
                text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–°–æ–æ–±—â–µ–Ω–∏–µ'] + ' ' + key_name,
                reply_markup=markup['keyboard']
            )
            v_category = data['v_category']
            v_category += markup['values']
            await state.update_data(v_category=v_category)
            await state.update_data(v_step=markup['values'])
            await state.update_data(step=2)
            await state.update_data(last_step_name=key_name)
            return

    ################################
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    step_choice = data['step_choice']
    last_step_name = data['last_step_name']
    step_choice[last_step_name] = message.text
    await state.update_data(step_choice=step_choice)
    ################################
    # –ì–æ–Ω—è–µ–º —Ü–∏–∫–ª–æ–º –ø–æ–∫–∞ –≤—Å–µ –∫–ª—é—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã

    if int(len(keys_list)) + 1 != int(step):
        markup = await kb.kb_key_values_2(
            key_name=key_name,
            category__name=category__name,
            value=last_step_name
        )
        await client.send_message(
            chat_id=message.from_user.id,
            text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ö–ª—é—á']['–°–æ–æ–±—â–µ–Ω–∏–µ'] + ' ' + key_name,
            reply_markup=markup['keyboard']
        )
        v_category = data['v_category']
        v_category += markup['values']
        await state.update_data(v_category=v_category)
        await state.update_data(v_step=markup['values'])
        await state.update_data(step=step + 1)

        await state.update_data(last_step_name=key_name)
        return
    data = await state.get_data()
    price = await api.post_values_keys(
        subcategory__name=category__name,
        key_dict=data['step_choice']
    )
    if not price:
        await client.send_message(
            chat_id=message.from_user.id,
            text=text['–ù–æ–≤—ã–µ']['–ú–µ–Ω—é']['–ü—Ä–∞–π—Å']['404'],
        )
        return

    markup = await kb.get_product_kb()
    await send_to_user(
        message=message,
        text=price['text'],
        images=[price['image']],
        inline_keyboard=markup
    )


################################
#–ü–æ–∏—Å–∫
